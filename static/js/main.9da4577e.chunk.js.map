{"version":3,"sources":["components/addTodo.js","components/todo.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","props","useState","input","setInput","Container","Form","onSubmit","e","preventDefault","length","submitHandler","Group","controlId","Control","type","placeholder","className","onChange","target","value","console","log","Button","Todos","todo","map","id","Card","key","Row","Col","title","onClick","onDelete","App","setTodo","text","prevTodo","Math","floor","random","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0QA+CeA,EA3CC,SAAAC,GAAU,IAAD,EACGC,mBAAS,MADZ,mBAChBC,EADgB,KACTC,EADS,KAgBvB,OACE,oCACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,SAZQ,SAAAC,GACpBA,EAAEC,iBACEN,EAAMO,OAAS,GACjBT,EAAMU,cAAcR,KAUd,kBAACG,EAAA,EAAKM,MAAN,CAAYC,UAAU,kBACpB,kBAACP,EAAA,EAAKQ,QAAN,CACEC,KAAK,OACLC,YAAY,mBACZC,UAAU,MACVC,SAvBM,SAAAV,GAClBJ,EAASI,EAAEW,OAAOC,OAClBC,QAAQC,IAAId,EAAEW,OAAOC,WAyBb,kBAACG,EAAA,EAAD,CACER,KAAK,SACLE,UAAU,4CAFZ,uB,wBCDGO,EA5BD,SAAAvB,GACZ,OACE,oCACE,kBAACI,EAAA,EAAD,CAAWY,UAAU,qBAClBhB,EAAMwB,KAAKC,KAAI,SAACD,EAAME,GAAP,OACd,kBAACC,EAAA,EAAD,CAAMX,UAAU,mBAAmBY,IAAKF,GACtC,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKd,UAAU,UACb,wBAAIA,UAAU,0BAA0BQ,EAAKO,QAE/C,kBAACD,EAAA,EAAD,CAAKd,UAAU,SACb,uBACEA,UAAU,+BACVgB,QAAS,WACPhC,EAAMiC,SAAST,EAAKE,MAGtB,uBAAGV,UAAU,+BCsBhBkB,MAtCf,WAAiB,IAAD,EACUjC,mBAAS,CAC/B,CAAE8B,MAAO,+BAAgCL,GAAI,GAC7C,CAAEK,MAAO,oCAAqCL,GAAI,GAClD,CAAEK,MAAO,0BAA2BL,GAAI,GACxC,CAAEK,MAAO,uCAAwCL,GAAI,KALzC,mBACPF,EADO,KACDW,EADC,KA2Bd,OACE,yBAAKnB,UAAU,OACb,kBAACZ,EAAA,EAAD,KACE,wBAAIY,UAAU,aAAd,SACA,kBAAC,EAAD,CAASN,cAvBO,SAAA0B,GAChBA,EAAK3B,OAAS,GAChB0B,GAAQ,SAAAE,GACN,MAAM,GAAN,mBACKA,GADL,CAEE,CAAEN,MAAOK,EAAMV,GAAIY,KAAKC,MAAsB,IAAhBD,KAAKE,SAAiB,YAmBtD,kBAAC,EAAD,CAAMhB,KAAMA,EAAMS,SAZP,SAAAL,GACfR,QAAQC,IAAIO,GACZO,GAAQ,SAAAE,GACN,OAAOA,EAASI,QAAO,SAAAjB,GAAI,OAAIA,EAAKE,KAAOE,cCjB7Bc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.9da4577e.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport '../App.css'\r\nimport { Container, Form, Button } from 'react-bootstrap'\r\n\r\nconst AddTodo = props => {\r\n  const [input, setInput] = useState(null)\r\n\r\n  const formHandler = e => {\r\n    setInput(e.target.value)\r\n    console.log(e.target.value)\r\n  }\r\n\r\n  const submitHandler = e => {\r\n    e.preventDefault()\r\n    if (input.length > 3) {\r\n      props.submitHandler(input)\r\n    } else {\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Container>\r\n          <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId='formBasicEmail'>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter Your Todos'\r\n                className='p-4'\r\n                onChange={formHandler}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Button\r\n              type='submit'\r\n              className='text-white font-weight-bold lg pl-5 pr-5'\r\n            >\r\n              Add Your Todos\r\n            </Button>\r\n          </Form>\r\n        </Container>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AddTodo\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react'\r\nimport '../App.css'\r\nimport { Container, Card, Row, Col } from 'react-bootstrap'\r\n\r\nconst Todos = props => {\r\n  return (\r\n    <>\r\n      <Container className=' pt-2  text-dark '>\r\n        {props.todo.map((todo, id) => (\r\n          <Card className='p-3 m-3 bg-light' key={id}>\r\n            <Row>\r\n              <Col className='col-10'>\r\n                <h4 className='text-justify display-4'>{todo.title}</h4>\r\n              </Col>\r\n              <Col className='col-2'>\r\n                <a\r\n                  className='btn text-danger align-middle'\r\n                  onClick={() => {\r\n                    props.onDelete(todo.id)\r\n                  }}\r\n                >\r\n                  <i className='fas fa-trash-alt' />\r\n                </a>\r\n              </Col>\r\n            </Row>\r\n          </Card>\r\n        ))}\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Todos\r\n","import React, { useState } from 'react'\nimport './App.css'\nimport { Container } from 'react-bootstrap'\nimport AddTodo from './components/addTodo'\nimport Todo from './components/todo'\n\nfunction App () {\n  const [todo, setTodo] = useState([\n    { title: 'Have to finish EA Assignment', id: 1 },\n    { title: 'Have to start flutter new project', id: 2 },\n    { title: 'Have to create blog app', id: 3 },\n    { title: 'There is birthday party in next week', id: 4 }\n  ])\n\n  const submitHandler = text => {\n    if (text.length > 3) {\n      setTodo(prevTodo => {\n        return [\n          ...prevTodo,\n          { title: text, id: Math.floor(Math.random() * 100 + 1) }\n        ]\n      })\n    } else {\n    }\n  }\n\n  const onDelete = key => {\n    console.log(key)\n    setTodo(prevTodo => {\n      return prevTodo.filter(todo => todo.id !== key)\n    })\n  }\n\n  return (\n    <div className='App'>\n      <Container>\n        <h1 className='display-1'>Todos</h1>\n        <AddTodo submitHandler={submitHandler} />\n        <Todo todo={todo} onDelete={onDelete} />\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}